" External dependencies (use `brew` on macOS):
"  - fzf
"  - ripgrep
"
" Then, use the following in .zshrc/.bashrc:
"   if type rg &> /dev/null; then
"     export FZF_DEFAULT_COMMAND='rg --files'
"     export FZF_DEFAULT_OPTS='-m --height 50% --border'
"   fi
"
" https://dev.to/iggredible/how-to-search-faster-in-vim-with-fzf-vim-36ko

call plug#begin()

    Plug 'preservim/nerdtree' " Side file tree
    "Switch back to main branch (tiagofumo) once #54 is merged
    "Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " File icons for NERDTree
    Plug 'johnstef99/vim-nerdtree-syntax-highlight'
    Plug 'ryanoasis/vim-devicons' " Converts custom unicode characters to icons (needs NERDFont)
    Plug 'dracula/vim' " Dark theme
    Plug 'neoclide/coc.nvim', {'branch': 'release'} " Completion engine
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " Fuzzy file finder
    Plug 'junegunn/fzf.vim' " Vim integration for FZF
    Plug 'voldikss/vim-floaterm' " Floating terminal
    Plug 'skywind3000/asynctasks.vim'
    Plug 'skywind3000/asyncrun.vim'
    Plug 'puremourning/vimspector' " Debug interface
    "Plug 'mhinz/vim-startify'
    "Plug 'lambdalisue/fern.vim'
    "Plug 'antoinemadec/FixCursorHold.nvim' ONLY NEEDED IN NVIM <v0.8
    Plug 'vim-airline/vim-airline' " Improved bottom line (consider changing to vim-lightline)
    Plug 'vim-airline/vim-airline-themes' " Themes for airline
    Plug 'zefei/vim-wintabs' " Tabs for windows
    Plug 'zefei/vim-wintabs-powerline' " Enables powerline fonts for vim-wintabs
    "Plug 'preservim/nerdcommenter' " Comment shortcut

call plug#end()

"let g:asyncrun_open = 6

let g:airline_solarized_bg='dark'
let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#show_tab_nr = 1

nnoremap <silent> ] :WintabsNext<CR>
nnoremap <silent> [ :WintabsPrevious<CR>
nnoremap <silent> <leader>q :WintabsClose<CR>
nnoremap <silent> <leader><S-q> :WintabsCloseWindow<CR>

" Map <S-w> to <CTL-w>, to be a little less awkward since I use left-ctl
"A problem I'm having with this binding is SHIFT key is being held down a bit
"longer and is messing with the following keypress.
"Move back to <C-w> and see if it's bearable.
"nnoremap <S-w> <C-w>

" Functions for splitting window without copying buffer. This "cheats"
" by adding an empty window to the left/top, then move cursor right/bottom.
:function SplitWinRight()
    lefta vnew
    wincmd l
:endfunction
:function SplitWinDown()
    lefta new
    wincmd j
:endfunction

nnoremap <silent> <leader>L :call SplitWinRight()<CR>
nnoremap <silent> <leader>J :call SplitWinDown()<CR>

" @todo Map :only ? (make current window the only one on the screen. All other
" windows are closed.)
" Map :WintabsOnly instead.

" Resize left/right with -/=, resize down/up with _/= (S--, S-+)
noremap <silent> = :<C-u>exe 'vertical resize +' . v:count1<CR>
noremap <silent> - :<C-u>exe 'vertical resize -' . v:count1<CR>
noremap <silent> + :<C-u>exe 'resize +' . v:count1<CR>
noremap <silent> _ :<C-u>exe 'resize -' . v:count1<CR>

" Save on <leader>w
nnoremap <leader>w :update<CR>
" Save all on <leader><S-w>
nnoremap <leader><S-w> :bufdo update<CR>

" Quit all on <leader><CTL-Q>
nnoremap <silent> <leader><C-q> :qa<CR>


" https://dev.to/rishitpandey/setting-up-neovim-like-vscode-j8h
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'


nnoremap <silent> <C-t> :NERDTreeToggle<CR>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTreeToggle | endif

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" If NERDTree is the only buffer remaining, open a new window to the right
" side
"autocmd BufEnter * if (expand('%') =~# 'NERD_tree' && winnr('$') == 1)  endif

" Prevent FZF and NERDTree clashing in the same buffer
function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

" Fuzzy File Finder
"nnoremap <silent> <c-p> :call FZFOpen(':Files')<CR>
nnoremap <silent> <leader>s :call FZFOpen(':Files')<CR>
" Buffer lines
nnoremap <silent> <leader>/ :call FZFOpen(':BLines')<CR>

" AsyncTask
"let g:asynctasks_term_pos = 'bottom'
"let g:asynctasks_term_reuse = 1

noremap <silent> <leader>r :AsyncTask run<CR>

" Vimspector
let g:vimspector_install_gadgets = ['CodeLLDB']
" let g:vimspector_enable_mappings = 'HUMAN'
:nnoremap <silent> <leader>b <Plug>VimspectorToggleBreakpoints<ESC>
:nnoremap <silent> <F6> <Plug>VimspectorContinue
:nnoremap <silent> <F7> <Plug>VimspectorStepOver
:nnoremap <silent> <F8> <Plug>VimspectorStepInto
:nnoremap <silent> <F9> <Plug>VimspectorStepOut
:nnoremap <silent> <F10> <Plug>VimspectorReset
:nnoremap <silent> <leader>6 :call vimspector#Launch()<CR>

" https://til.hashrocket.com/posts/wa1bvrgjdd-escaping-terminal-mode-in-an-nvim-terminal
:tnoremap <Esc> <C-\><C-n>

" https://medium.com/geekculture/neovim-configuration-for-beginners-b2116dbbde84
set nocompatible
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
set autoindent
filetype plugin indent on
syntax on
" set mouse=a Disabling mosue so that I force myself to use keyboard only
set clipboard=unnamedplus
set cursorline
set lazyredraw
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=yes
set splitbelow
set splitright
let g:no_plugin_maps=1
set smartcase
set confirm


" Shorten filename shown on status line


" Leader
nnoremap <SPACE> <Nop>
nmap <Space> <Leader>

"if (has("termguicolors"))
"    set termguicolors
"end
"syntax enable

colorscheme dracula

" Relative line numbers
set relativenumber

" Floaterm
nnoremap <silent> ` :FloatermToggle<CR>
tnoremap <silent> ` <C-\><C-n>:FloatermToggle<CR>

" From coc.vim README
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Put shortcut for switch header/source
nnoremap <silent> <leader>o :CocCommand clangd.switchSourceHeader<CR>

" Create default mappings
let g:NERDCreateDefaultMappings = 1
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 0
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

" Map redo to shift-u
nnoremap U :redo<CR>

if has("nvim")
  au TermOpen * tnoremap <Esc> <c-\><c-n>
  au FileType fzf tunmap <Esc>
endif

